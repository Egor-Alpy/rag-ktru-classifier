#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –ö–¢–†–£
"""

import sys
import os
import requests
import json
import numpy as np
from qdrant_client import QdrantClient

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
project_dir = "/workspace/rag-ktru-classifier"
if os.path.exists(project_dir) and os.getcwd() != project_dir:
    os.chdir(project_dir)
    print(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞: {project_dir}")

from config import QDRANT_HOST, QDRANT_PORT, QDRANT_COLLECTION, API_HOST, API_PORT
from embedding import generate_embedding, test_embeddings


def check_qdrant_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Qdrant"""
    print("\nüîç 1. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –í QDRANT")
    print("=" * 50)

    try:
        client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collection_info = client.get_collection(QDRANT_COLLECTION)
        count_info = client.count(QDRANT_COLLECTION)

        print(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {QDRANT_COLLECTION}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {count_info.count:,}")
        print(f"üìè –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤: {collection_info.config.params.vectors.size}")
        print(f"üìê –ú–µ—Ç—Ä–∏–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {collection_info.config.params.vectors.distance.name}")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
        examples = client.scroll(
            collection_name=QDRANT_COLLECTION,
            limit=5,
            with_payload=True,
            with_vectors=False
        )

        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:")
        for i, point in enumerate(examples[0], 1):
            payload = point.payload
            print(f"  {i}. {payload.get('ktru_code', 'N/A')} - {payload.get('title', 'N/A')[:60]}...")

        # –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π
        print(f"\nüîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π:")
        computer_examples = client.scroll(
            collection_name=QDRANT_COLLECTION,
            scroll_filter={
                "should": [
                    {"key": "title", "match": {"text": "–∫–æ–º–ø—å—é—Ç–µ—Ä"}},
                    {"key": "title", "match": {"text": "–Ω–æ—É—Ç–±—É–∫"}},
                    {"key": "title", "match": {"text": "laptop"}},
                    {"key": "ktru_code", "match": {"text": "26.20"}},  # –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –æ–±—ã—á–Ω–æ 26.20
                ]
            },
            limit=5,
            with_payload=True,
            with_vectors=False
        )

        if computer_examples[0]:
            for i, point in enumerate(computer_examples[0], 1):
                payload = point.payload
                print(f"  {i}. {payload.get('ktru_code', 'N/A')} - {payload.get('title', 'N/A')[:60]}...")
        else:
            print("  ‚ùå –ó–∞–ø–∏—Å–∏ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Qdrant: {e}")
        return False


def check_embeddings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    print("\nüîç 2. –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –≠–ú–ë–ï–î–î–ò–ù–ì–û–í")
    print("=" * 50)

    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        test_embeddings()

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º
        print(f"\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º:")

        client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT)

        test_queries = [
            "–Ω–æ—É—Ç–±—É–∫ –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π",
            "—Ä—É—á–∫–∞ —à–∞—Ä–∏–∫–æ–≤–∞—è –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ",
            "—Å—Ç–æ–ª –ø–∏—Å—å–º–µ–Ω–Ω—ã–π –æ—Ñ–∏—Å–Ω—ã–π –º–µ–±–µ–ª—å"
        ]

        for query in test_queries:
            print(f"\n  üîé –ó–∞–ø—Ä–æ—Å: '{query}'")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
            embedding = generate_embedding(query)
            print(f"     –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {len(embedding)}")
            print(f"     –ù–æ—Ä–º–∞ –≤–µ–∫—Ç–æ—Ä–∞: {np.linalg.norm(embedding):.3f}")

            # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ
            results = client.search(
                collection_name=QDRANT_COLLECTION,
                query_vector=embedding.tolist(),
                limit=3
            )

            for i, result in enumerate(results, 1):
                score = getattr(result, 'score', 0)
                payload = result.payload
                print(
                    f"     {i}. {payload.get('ktru_code', 'N/A')} | {score:.3f} | {payload.get('title', 'N/A')[:50]}...")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        import traceback
        print(f"Traceback: {traceback.format_exc()}")
        return False


def test_api_classification():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîç 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 50)

    try:
        test_cases = [
            {
                "name": "–ù–æ—É—Ç–±—É–∫ (–ø—Ä–æ—Å—Ç–æ–π)",
                "data": {
                    "title": "–ù–æ—É—Ç–±—É–∫",
                    "description": "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä"
                }
            },
            {
                "name": "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π",
                "data": {
                    "title": "–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π",
                    "description": "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è –æ—Ñ–∏—Å–∞"
                }
            },
            {
                "name": "–†—É—á–∫–∞ —à–∞—Ä–∏–∫–æ–≤–∞—è",
                "data": {
                    "title": "–†—É—á–∫–∞ —à–∞—Ä–∏–∫–æ–≤–∞—è",
                    "description": "–ö–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∞—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å"
                }
            },
            {
                "name": "–ë—É–º–∞–≥–∞ –¥–ª—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞",
                "data": {
                    "title": "–ë—É–º–∞–≥–∞ –±–µ–ª–∞—è –ê4",
                    "description": "–ë—É–º–∞–≥–∞ –æ—Ñ–∏—Å–Ω–∞—è –¥–ª—è –ø–µ—á–∞—Ç–∏"
                }
            }
        ]

        successful = 0
        total = len(test_cases)

        for test_case in test_cases:
            print(f"\nüß™ {test_case['name']}")

            try:
                response = requests.post(
                    f"http://{API_HOST}:{API_PORT}/classify",
                    json=test_case['data'],
                    timeout=30
                )

                if response.status_code == 200:
                    result = response.json()
                    ktru_code = result.get('ktru_code', 'N/A')
                    ktru_title = result.get('ktru_title', 'N/A')
                    confidence = result.get('confidence', 0)
                    processing_time = result.get('processing_time', 0)

                    print(f"   ‚úÖ –ö–æ–¥: {ktru_code}")
                    if ktru_title and ktru_title != 'N/A':
                        print(f"   üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {ktru_title}")
                    print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}")
                    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {processing_time:.2f}—Å")

                    # –û—Ü–µ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
                    is_correct = False
                    if "–Ω–æ—É—Ç–±—É–∫" in test_case['name'].lower() or "–∫–æ–º–ø—å—é—Ç–µ—Ä" in test_case['name'].lower():
                        if "26.20" in ktru_code or "–∫–æ–º–ø—å—é—Ç–µ—Ä" in ktru_title.lower():
                            is_correct = True
                    elif "—Ä—É—á–∫–∞" in test_case['name'].lower():
                        if "—Ä—É—á–∫–∞" in ktru_title.lower() or "30.19" in ktru_code:
                            is_correct = True
                    elif "–±—É–º–∞–≥–∞" in test_case['name'].lower():
                        if "–±—É–º–∞–≥–∞" in ktru_title.lower() or "17.23" in ktru_code:
                            is_correct = True

                    if is_correct:
                        print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                        successful += 1
                    else:
                        print(f"   ‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    print(f"   ‚ùå HTTP {response.status_code}: {response.text}")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

        print(f"\nüìä –ò—Ç–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {successful}/{total}")
        return successful > total // 2  # –ë–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return False


def check_sample_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ"""
    print("\nüîç 4. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)

    try:
        client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT)

        # –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories_to_check = [
            ("–∫–æ–º–ø—å—é—Ç–µ—Ä", "26.20"),
            ("–Ω–æ—É—Ç–±—É–∫", "26.20"),
            ("—Ä—É—á–∫–∞", "30.19"),
            ("–±—É–º–∞–≥–∞", "17.23"),
            ("—Å—Ç–æ–ª", "31.09"),
            ("–ø—Ä–∏–Ω—Ç–µ—Ä", "30.20")
        ]

        for keyword, expected_code_prefix in categories_to_check:
            print(f"\nüîç –ü–æ–∏—Å–∫ '{keyword}' (–æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–¥ {expected_code_prefix}.*)")

            # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
            results = client.scroll(
                collection_name=QDRANT_COLLECTION,
                scroll_filter={
                    "should": [
                        {"key": "title", "match": {"text": keyword}},
                        {"key": "description", "match": {"text": keyword}},
                        {"key": "ktru_code", "match": {"text": expected_code_prefix}}
                    ]
                },
                limit=3,
                with_payload=True,
                with_vectors=False
            )

            if results[0]:
                for i, point in enumerate(results[0], 1):
                    payload = point.payload
                    code = payload.get('ktru_code', 'N/A')
                    title = payload.get('title', 'N/A')
                    print(f"   {i}. {code} - {title[:60]}...")
            else:
                print(f"   ‚ùå –ó–∞–ø–∏—Å–∏ —Å '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def generate_recommendations():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
    print("\nüí° 5. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ")
    print("=" * 50)

    recommendations = [
        "1. üîß –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã classifier.py –∏ embedding.py –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏",
        "2. üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –ö–¢–†–£ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ",
        "3. üéØ –ü–æ–Ω–∏–∑–∏—Ç—å –ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å 0.75 –¥–æ 0.65 –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞",
        "4. üìù –£–ø—Ä–æ—Å—Ç–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM –º–æ–¥–µ–ª–∏",
        "5. üîç –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ª–æ–≥–∏",
        "6. üìà –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞",
        "7. üß™ –î–æ–±–∞–≤–∏—Ç—å unit-—Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        "8. üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ö–¢–†–£ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"
    ]

    for rec in recommendations:
        print(f"   {rec}")

    print(f"\nüöÄ –ü–ï–†–í–û–û–ß–ï–†–ï–î–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
    print(f"   1. –ó–∞–º–µ–Ω–∏—Ç–µ classifier.py –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
    print(f"   2. –ó–∞–º–µ–Ω–∏—Ç–µ embedding.py –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é")
    print(f"   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É")
    print(f"   4. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò –ö–¢–†–£")
    print("=" * 60)

    results = []

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Qdrant
    results.append(("–î–∞–Ω–Ω—ã–µ –≤ Qdrant", check_qdrant_data()))

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    results.append(("–ö–∞—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", check_embeddings()))

    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API
    results.append(("API –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è", test_api_classification()))

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    results.append(("–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", check_sample_data()))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    print("=" * 60)

    all_good = True
    for name, status in results:
        icon = "‚úÖ" if status else "‚ùå"
        print(f"   {icon} {name}")
        if not status:
            all_good = False

    if not all_good:
        print(f"\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
        generate_recommendations()
    else:
        print(f"\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    return 0 if all_good else 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)