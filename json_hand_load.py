#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ö–¢–†–£ –∏–∑ JSON —Ñ–∞–π–ª–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python load_ktru_json.py --json_file path/to/ktru_data.json
"""

import argparse
import os
import sys
import json
import logging
from pathlib import Path

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
project_dir = "/workspace/rag-ktru-classifier"
if os.path.exists(project_dir) and os.getcwd() != project_dir:
    os.chdir(project_dir)
    print(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞: {project_dir}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
from process_ktru_json import process_ktru_json
from config import KTRU_JSON_PATH, DATA_DIR

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def validate_json_file(json_path):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ JSON —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ö–¢–†–£"""
    try:
        if not os.path.exists(json_path):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {json_path}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(json_path)
        if file_size < 100:
            logger.error(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª: {file_size} –±–∞–π—Ç")
            return False

        logger.info(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024 * 1024):.2f} –ú–ë")

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        with open(json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        if not isinstance(data, list):
            logger.error("JSON —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤")
            return False

        if len(data) == 0:
            logger.error("JSON —Ñ–∞–π–ª –ø—É—Å—Ç")
            return False

        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ JSON: {len(data):,}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        first_record = data[0]
        required_fields = ['ktru_code', 'title']

        for field in required_fields:
            if field not in first_record:
                logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False

        logger.info(f"–ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏: {first_record.get('ktru_code')} - {first_record.get('title')[:50]}...")

        return True

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return False


def copy_json_to_data_dir(source_path, target_path):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(target_path), exist_ok=True)

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        import shutil
        shutil.copy2(source_path, target_path)

        logger.info(f"–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {source_path} -> {target_path}")
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ö–¢–†–£ –∏–∑ JSON —Ñ–∞–π–ª–∞')
    parser.add_argument('--json_file', type=str, help='–ü—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ö–¢–†–£')
    parser.add_argument('--copy_to_data', action='store_true',
                        help='–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞')
    parser.add_argument('--force', action='store_true',
                        help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
    if args.json_file:
        json_path = args.json_file
    else:
        json_path = KTRU_JSON_PATH

    logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ö–¢–†–£ –∏–∑ JSON —Ñ–∞–π–ª–∞")
    logger.info(f"–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {json_path}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
    if not validate_json_file(json_path):
        logger.error("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON —Ñ–∞–π–ª–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
        return 1

    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if args.copy_to_data and json_path != KTRU_JSON_PATH:
        if not copy_json_to_data_dir(json_path, KTRU_JSON_PATH):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª")
            return 1
        json_path = KTRU_JSON_PATH

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è --force
    if not args.force:
        response = input(f"\nü§î –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {json_path}? –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è. (y/N): ")
        if response.lower() not in ['y', 'yes', '–¥–∞']:
            logger.info("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return 0

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É...")
        process_ktru_json(json_path)
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            from qdrant_client import QdrantClient
            from config import QDRANT_HOST, QDRANT_PORT, QDRANT_COLLECTION

            client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT)
            collection_info = client.get_collection(QDRANT_COLLECTION)
            count = client.count(QDRANT_COLLECTION)

            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã:")
            logger.info(f"   - –ö–æ–ª–ª–µ–∫—Ü–∏—è: {QDRANT_COLLECTION}")
            logger.info(f"   - –í–µ–∫—Ç–æ—Ä–æ–≤: {count.count:,}")
            logger.info(f"   - –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {collection_info.config.params.vectors.size}")

        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")

        return 0

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)