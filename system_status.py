#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ö–¢–†–£
"""

import sys
import time
import requests
from qdrant_client import QdrantClient
from qdrant_client.http.exceptions import UnexpectedResponse
import logging
from config import (
    QDRANT_HOST, QDRANT_PORT, QDRANT_COLLECTION,
    API_HOST, API_PORT
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def check_qdrant_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Qdrant"""
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant –Ω–∞ {QDRANT_HOST}:{QDRANT_PORT}")
        qdrant_client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        collections = qdrant_client.get_collections()
        logger.info(f"‚úÖ Qdrant –¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections.collections)}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö
        total_vectors = 0
        for collection in collections.collections:
            try:
                collection_info = qdrant_client.get_collection(collection.name)
                collection_stats = qdrant_client.count(collection.name)

                logger.info(f"üìä –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection.name}':")
                logger.info(f"   - –í–µ–∫—Ç–æ—Ä–æ–≤: {collection_stats.count:,}")
                logger.info(f"   - –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {collection_info.config.params.vectors.size}")
                logger.info(f"   - –ú–µ—Ç—Ä–∏–∫–∞: {collection_info.config.params.vectors.distance.name}")
                logger.info(f"   - –°—Ç–∞—Ç—É—Å: {collection_info.status.name}")

                total_vectors += collection_stats.count

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –ö–¢–†–£
                if collection.name == QDRANT_COLLECTION:
                    if collection_stats.count > 0:
                        logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –ö–¢–†–£ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ ({collection_stats.count:,} –∑–∞–ø–∏—Å–µ–π)")
                    else:
                        logger.warning(f"‚ö†Ô∏è  –ö–æ–ª–ª–µ–∫—Ü–∏—è –ö–¢–†–£ –ø—É—Å—Ç–∞")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {collection.name}: {e}")

        logger.info(f"üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {total_vectors:,}")
        return True

    except Exception as e:
        logger.error(f"‚ùå Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


def check_api_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    try:
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ API –Ω–∞ {API_HOST}:{API_PORT}")

        # Health check
        response = requests.get(f"http://{API_HOST}:{API_PORT}/health", timeout=5)
        if response.status_code == 200:
            logger.info("‚úÖ API Health check —É—Å–ø–µ—à–µ–Ω")
        else:
            logger.error(f"‚ùå API Health check failed: {response.status_code}")
            return False

        # Status check
        try:
            response = requests.get(f"http://{API_HOST}:{API_PORT}/status", timeout=10)
            if response.status_code == 200:
                status_data = response.json()
                logger.info("‚úÖ API Status check —É—Å–ø–µ—à–µ–Ω")
                logger.info(f"   - Qdrant: {status_data.get('qdrant', 'unknown')}")
                logger.info(f"   - –ú–æ–¥–µ–ª–∏: {status_data.get('models', 'unknown')}")
                logger.info(f"   - –ö–¢–†–£ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {status_data.get('ktru_loaded', False)}")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π
                collections = status_data.get('collections', {})
                for name, info in collections.items():
                    logger.info(f"   - {name}: {info.get('vectors_count', 0):,} –≤–µ–∫—Ç–æ—Ä–æ–≤")
            else:
                logger.warning(f"‚ö†Ô∏è  API Status –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
        except:
            logger.warning("‚ö†Ô∏è  API Status endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

        return True

    except Exception as e:
        logger.error(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False


def check_models_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥–µ–ª–µ–π"""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        try:
            from embedding import embedding_model
            if embedding_model and embedding_model.model:
                logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {embedding_model.tokenizer.name_or_path}")
                logger.info(f"   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {embedding_model.device}")
            else:
                logger.error("‚ùå –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM –º–æ–¥–µ–ª—å
        try:
            from classifier import classifier
            if classifier and classifier.llm and classifier.tokenizer:
                logger.info(f"‚úÖ LLM –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                logger.info(f"   - –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {classifier.tokenizer.name_or_path}")
            else:
                logger.warning("‚ö†Ô∏è  LLM –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ LLM –º–æ–¥–µ–ª–∏: {e}")

        return True

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥–µ–ª–µ–π: {e}")
        return False


def test_classification():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...")

        test_data = {
            "title": "–ù–æ—É—Ç–±—É–∫ ASUS",
            "description": "–ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã",
            "attributes": [
                {"attr_name": "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä", "attr_value": "Intel Core i5"},
                {"attr_name": "–ü–∞–º—è—Ç—å", "attr_value": "8 –ì–ë"}
            ]
        }

        response = requests.post(
            f"http://{API_HOST}:{API_PORT}/classify",
            json=test_data,
            timeout=30
        )

        if response.status_code == 200:
            result = response.json()
            logger.info(f"‚úÖ –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–µ–Ω")
            logger.info(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('ktru_code', 'N/A')}")
            logger.info(f"   - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.get('confidence', 0):.2f}")
            logger.info(f"   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.2f}—Å")
            return True
        else:
            logger.error(f"‚ùå –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ failed: {response.status_code}")
            logger.error(f"   Response: {response.text}")
            return False

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    logger.info("üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ö–¢–†–£")
    logger.info("=" * 60)

    checks = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant
    logger.info("1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant...")
    checks.append(("Qdrant", check_qdrant_status()))

    logger.info("")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    logger.info("2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ API...")
    checks.append(("API", check_api_status()))

    logger.info("")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
    logger.info("3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π...")
    checks.append(("Models", check_models_status()))

    logger.info("")

    # –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    logger.info("4Ô∏è‚É£  –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    checks.append(("Classification", test_classification()))

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("")
    logger.info("=" * 60)
    logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")

    all_passed = True
    for component, status in checks:
        status_icon = "‚úÖ" if status else "‚ùå"
        status_text = "–†–ê–ë–û–¢–ê–ï–¢" if status else "–ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        logger.info(f"   {status_icon} {component:<12} : {status_text}")
        if not status:
            all_passed = False

    logger.info("")

    if all_passed:
        logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return 0
    else:
        logger.error("‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã!")
        return 1


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)