import time
import json
import numpy as np
import argparse
from tqdm import tqdm
import logging
from qdrant_client import QdrantClient
from qdrant_client.http import models as rest
from embedding import generate_embedding, generate_batch_embeddings
from config import (
    QDRANT_HOST, QDRANT_PORT, QDRANT_COLLECTION, VECTOR_SIZE,
    BATCH_SIZE
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def load_ktru_data_from_json(json_file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ö–¢–†–£ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    try:
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ö–¢–†–£ –∏–∑ —Ñ–∞–π–ª–∞: {json_file_path}")
        with open(json_file_path, 'r', encoding='utf-8') as f:
            ktru_data = json.load(f)
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(ktru_data)}")
        return ktru_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞: {e}")
        return None


def prepare_ktru_text_enhanced(ktru_entry):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏–∑ –∑–∞–ø–∏—Å–∏ –ö–¢–†–£"""
    text_parts = []

    # –ö–æ–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ - —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ
    if ktru_entry.get('ktru_code'):
        text_parts.append(f"–∫–æ–¥ –ö–¢–†–£: {ktru_entry['ktru_code']}")

    if ktru_entry.get('title'):
        text_parts.append(f"–Ω–∞–∑–≤–∞–Ω–∏–µ: {ktru_entry['title']}")

    # –û–ø–∏—Å–∞–Ω–∏–µ
    if ktru_entry.get('description'):
        text_parts.append(f"–æ–ø–∏—Å–∞–Ω–∏–µ: {ktru_entry['description']}")

    # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    if ktru_entry.get('unit'):
        text_parts.append(f"–µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è: {ktru_entry['unit']}")

    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if ktru_entry.get('keywords') and ktru_entry['keywords']:
        keywords_text = ', '.join(ktru_entry['keywords'])
        text_parts.append(f"–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords_text}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    if 'attributes' in ktru_entry and ktru_entry['attributes']:
        attr_texts = []

        for attr in ktru_entry['attributes']:
            attr_name = attr.get('attr_name', '')

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å attr_values (—Ñ–æ—Ä–º–∞—Ç KTRU)
            if 'attr_values' in attr and attr['attr_values']:
                values = []
                for val in attr['attr_values']:
                    value_text = val.get('value', '')
                    value_unit = val.get('value_unit', '')

                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –µ–¥–∏–Ω–∏—Ü–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è
                    if value_unit and value_unit not in ['', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö']:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
                        units = value_unit.split(';')
                        unit_text = ' –∏–ª–∏ '.join(u.strip() for u in units if u.strip())
                        full_value = f"{value_text} {unit_text}"
                    else:
                        full_value = value_text

                    values.append(full_value)

                if values:
                    attr_text = f"{attr_name}: {', '.join(values)}"
                    attr_texts.append(attr_text)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å attr_value (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
            elif 'attr_value' in attr and attr['attr_value']:
                attr_text = f"{attr_name}: {attr['attr_value']}"
                attr_texts.append(attr_text)

        if attr_texts:
            text_parts.append("—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: " + '; '.join(attr_texts))

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–æ–¥–∞ KTRU (–ø–µ—Ä–≤—ã–µ —Ü–∏—Ñ—Ä—ã)
    if ktru_entry.get('ktru_code'):
        code_parts = ktru_entry['ktru_code'].split('.')
        if len(code_parts) >= 2:
            category_code = f"{code_parts[0]}.{code_parts[1]}"
            text_parts.append(f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∫–æ–¥–∞: {category_code}")

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
    full_text = ' | '.join(text_parts)

    return full_text


def setup_qdrant_collection():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Qdrant"""
    try:
        qdrant_client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è
        collections = qdrant_client.get_collections().collections
        collection_names = [collection.name for collection in collections]

        if QDRANT_COLLECTION not in collection_names:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {QDRANT_COLLECTION} –≤ Qdrant")
            qdrant_client.create_collection(
                collection_name=QDRANT_COLLECTION,
                vectors_config=rest.VectorParams(
                    size=VECTOR_SIZE,
                    distance=rest.Distance.COSINE
                )
            )
        else:
            logger.info(f"–ö–æ–ª–ª–µ–∫—Ü–∏—è {QDRANT_COLLECTION} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Qdrant")

        return qdrant_client
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Qdrant: {e}")
        return None


def process_ktru_json(json_file_path):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ö–¢–†–£ –∏–∑ JSON-—Ñ–∞–π–ª–∞"""
    start_time = time.time()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
    ktru_data = load_ktru_data_from_json(json_file_path)
    if not ktru_data:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ö–¢–†–£ –∏–∑ JSON-—Ñ–∞–π–ª–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
        return

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Qdrant
    qdrant_client = setup_qdrant_collection()
    if not qdrant_client:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Qdrant. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        total_records = len(ktru_data)
        logger.info(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –ö–¢–†–£ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_records}")

        if total_records == 0:
            logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ö–¢–†–£ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞–º–∏
        batch_size = BATCH_SIZE
        processed_count = 0

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞–º–∏
        for i in range(0, total_records, batch_size):
            batch = ktru_data[i:i + batch_size]
            batch_texts = []
            batch_ids = []

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            for idx, ktru_entry in enumerate(batch):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
                text_to_embed = prepare_ktru_text_enhanced(ktru_entry)
                batch_texts.append(text_to_embed)
                batch_ids.append(i + idx)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –∫–∞–∫ ID

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –ø–∞–∫–µ—Ç–∞
            batch_embeddings = generate_batch_embeddings(batch_texts)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è Qdrant
            points = []
            for idx, (ktru_entry, embedding) in enumerate(zip(batch, batch_embeddings)):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ payload
                payload = {
                    "ktru_code": ktru_entry.get('ktru_code', ''),
                    "title": ktru_entry.get('title', ''),
                    "description": ktru_entry.get('description', ''),
                    "unit": ktru_entry.get('unit', ''),
                    "version": ktru_entry.get('version', ''),
                    "keywords": ktru_entry.get('keywords', []),
                    "attributes": ktru_entry.get('attributes', []),
                    "source_link": ktru_entry.get('source_link', ''),
                    "updated_at": ktru_entry.get('updated_at', '')
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
                payload['_search_text'] = batch_texts[idx][:500]  # –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤

                points.append(rest.PointStruct(
                    id=batch_ids[idx],
                    vector=embedding.tolist(),
                    payload=payload
                ))

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ—á–∫–∏ –≤ Qdrant
            qdrant_client.upsert(
                collection_name=QDRANT_COLLECTION,
                points=points
            )

            processed_count += len(batch)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count}/{total_records} –∑–∞–ø–∏—Å–µ–π –ö–¢–†–£")

        elapsed_time = time.time() - start_time
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ö–¢–†–£ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∑–∞–ø–∏—Å–µ–π.")
        logger.info(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        collection_info = qdrant_client.get_collection(QDRANT_COLLECTION)
        count = qdrant_client.count(QDRANT_COLLECTION)
        logger.info(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {QDRANT_COLLECTION}:")
        logger.info(f"   - –í–µ–∫—Ç–æ—Ä–æ–≤ –≤ –±–∞–∑–µ: {count.count:,}")
        logger.info(f"   - –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {collection_info.config.params.vectors.size}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ö–¢–†–£: {e}")
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ö–¢–†–£ –∏–∑ JSON-—Ñ–∞–π–ª–∞')
    parser.add_argument('--json_file', type=str, required=True, help='–ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ö–¢–†–£')
    args = parser.parse_args()

    process_ktru_json(args.json_file)

